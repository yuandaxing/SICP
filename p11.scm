#lang slideshow

;(define c1 (circle 10))
(define r1 (rectangle 10 20))

;(vl-append 20 c1 r1)
;(lt-superimpose c1 r1)

(define MinSize 5)
(define (exp2 n)
  (if (= n 0) 1
      (* 2 (exp2 (- n 1)))))
(exp2 3)

(define (picture  n )
  (let ((wid (* (exp2 n) MinSize))
        (color (if (odd? n) "black" "red")))
    (if (= n 0)
        (colorize (rectangle wid wid) color)
        (hc-append (vc-append (picture (- n 1)) (picture (- n 1))) (colorize (rectangle (/ wid 2) wid) color)))))
;(picture 5) 
(define (picture-1 n adder)
    (let ((wid (* (exp2 n) MinSize))
          (color (cond ((= (remainder (+ n adder) 3) 0) "red")
                       ((= (remainder (+ n adder) 3) 1) "black")
                       (else "blue"))))
          (if (= n 0)
              (colorize (filled-rectangle wid wid) color)
              (hc-append (vc-append 
                          (picture-1 (- n 1) (- adder 1)) 
                          (picture-1 (- n 1) adder)) 
                         (colorize (filled-rectangle (/ wid 2) wid) color)))))

;(picture-1 5  10)
(define (picture-2  n)
  (let ((wid (* (exp2 n) MinSize)))
    (if (= n 0)
        (rectangle wid wid)
        (hc-append (vc-append (picture-2 (- n 1)) 
                              (picture-2 (- n 1))) 
                   (rectangle (/ wid 2) wid)))))
;(picture-2 6)


(define (first-splite-second-half  combine splite n f1 f2)
    (let ((wid (* (exp2 n) MinSize)))
    (if (= n 0)
        (rectangle wid wid)
        (combine (splite (first-splite-second-half  combine splite (- n 1) f1 f2)
                         (first-splite-second-half  combine splite (- n 1) f1 f2))
                   (rectangle (* wid f1) (* wid f2))))))

(define (second-splite-first-half combine splite n f1 f2)
  (let ((wid (* (exp2 n) MinSize)))
    (if (= n 0)
        (rectangle wid wid)
        (combine (rectangle (* wid f1) (* wid f2)) 
                 (splite (second-splite-first-half  combine splite (- n 1) f1 f2)
                         (second-splite-first-half  combine splite (- n 1) f1 f2))))))

(define (left-splite n)
  (first-splite-second-half hc-append vc-append n 1/2 1))
;(left-splite 5)
(define (top-splite n)
  (first-splite-second-half vc-append hc-append n 1 1/2))
;(top-splite 5)
(define (right-splite n)
  (second-splite-first-half hc-append vc-append n 1/2 1))
;(right-splite 5)
(define (down-splite n)
  (second-splite-first-half vc-append hc-append n 1 1/2))
;(down-splite 5)
(define (top-splite-1 n)
   (first-splite-second-half vc-append hc-append n 1 1))
(define (right-splite-1 n)
   (second-splite-first-half hc-append vc-append n 1 1))
(define (left-splite-1 n)
  (first-splite-second-half hc-append vc-append n 1 1))
(define (down-splite-1 n)
  (second-splite-first-half vc-append hc-append n 1 1))
;(right-splite-1 5)
;(top-splite-1 5)
(define (corner-splite-right-top n)
  (let ((wid (* (exp2 n) MinSize)))
    (if (= n 0)
        (rectangle wid wid)
        (let ((up (top-splite-1 (- n 1)))
              (right (right-splite-1 (- n 1))))
          (let ((top-left (hc-append up up))
                (bottom-right (vc-append right right))
                (corner (corner-splite-right-top (- n 1))))
            (vc-append (hc-append top-left corner)
                       (hc-append (rectangle wid wid) bottom-right)))))))
(define (c1 n) (corner-splite-right-top n))
(c1 4)

(define (corner-splite-left-top n)
  (let ((wid (* (exp2 n) MinSize)))
    (if (= n 0)
        (rectangle wid wid)
        (let ((up (top-splite-1 (- n 1)))
              (left (left-splite-1 (- n 1))))
          (let ((top-right (hc-append up up))
                (bottom-left (vc-append left left))
                (corner (corner-splite-left-top (- n 1))))
            (vc-append (hc-append corner top-right)
                       (hc-append bottom-left (rectangle wid wid))))))))
(define (c2 n) (corner-splite-left-top n))
(define (c3 n) (rotate (c2 n) (/ pi 2)))
(define (c4 n) (rotate (c3 n) (/ pi 2)))
(define (c5 n) (rotate (c4 n) (/ pi 2)))
;(c2 4)
;(c3 4)
;(c4 4)
;(c5 4)

;the line wid also scale
;(scale (c5 4) 2 2)

;(rotate (c2 4) (/ pi 4))
(define (top n) (hc-append (c2 n) (c1 n)))
(top 4)

(define r2 (rectangle 20 30))
;(rectangle 20 30)
;(rotate r2 90