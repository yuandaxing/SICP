(define (atom? x)
  (not (pair? x)))
(define (list-equal? l1 l2) 
  (cond ((and (null? l1) (null? l2)) true)
        ((or (null? l1) (null? l2)) false)
        ((and (pair? (car l1))
              (pair? (car l2)))
         (and (equal? (car l1) (car l2))
              (equal? (cdr l1) (cdr l2))))
        ((and (atom? (car l1)) (atom? (car l2)))
         (and (eq? (car l1) (car l2)) (equal? (cdr l1) (cdr l2))))
        (else false)))
;seems no need
(define (my-equal? x1 x2)
  (cond ((and (atom? x1) (atom? x2)) (eq? x1 x2))
        ((and (pair? x2) (pair? x2)) (list-equal? x1 x2))
        (else false)))

(define x1 2)
(define x2 'a)
(my-equal? x1 x2)
(my-equal? x2 x2)