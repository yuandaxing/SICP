
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))
(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)        
         (cons (car set1)
               (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))
(define (union-set s1 s2) 
  (cond ((null? s1) s2) 
        ((element-of-set? (car s1) s2) 
         (union-set (cdr s1) s2))
        (else (cons (car s1) 
                    (union-set (cdr s1) s2)))))
(define (sub-set s1 s2)
  (cond ((null? s1) null)
        ((element-of-set? (car s1) s2)
         (sub-set (cdr s1) s2))
        (else (cons (car s1)
                    (sub-set (cdr s1) s2)))))

(define (andq f1 f2)
  (lambda (l)
    (let ((a1 (f1 l))
          (a2 (f2 l)))
      (intersection-set a1 a2))))

(define (notq f)
  (lambda (l)
    (let ((a (f l)))
      (sub-set l a))))
(define (orq f1 f2)
  (lambda (l)
    (let ((a1 (f1 l))
          (a2 (f2 l)))
      (union-set a1 a2))))

(define (query-not x)
  (lambda (l)
    (filter (lambda (y) (not (eq? y x))) l)))
;(display ((query-not 10) '(1 10 11)))
(define (bigger x)
  (lambda (l)
    (filter (lambda (y) (> y x)) l)))
;(display ((bigger 10) '(1 10 11)))
(define (less x)
  (lambda (l)
    (filter (lambda (y) (< y x)) l)))
;(display ((less 10) '(1 10 11)))


;(1 100] || [200 300)
(define f1 (query-not 100))
(define f2 (query-not 200))
(define f3 (bigger 1))
(define f4 (bigger 200))
(define f5 (less 100))
(define f6 (less 300))

;(1 100]
(define q1 (orq (andq f3 f5) (notq f1)))
;[200 300)
(define q2 (orq (andq f4 f6) (notq f2)))
(define my-query (orq q1 q2))
;[3    205]
(define f7 (query-not 3))
(define f8 (query-not 205))
(define f9 (bigger 3))
(define f10 (less 205))

(define q3 (orq (orq (notq f7) (notq f8))
                (andq f9 f10)))
;define my-query - q3
(define q4 (andq my-query (notq q3)))
(define l1 '(1 2 3 4 5 100 200  201 202 203 204 205 206 207 299 300))
(newline)
(display (my-query l1))
(newline)
(display (q3 l1))
(newline)
(display (q4 l1))