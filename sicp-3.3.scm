#lang planet neil/sicp
(define (mystery x)
  (define (loop x y)
    (if (null? x)
        y
        (let ((temp (cdr x)))
          (set-cdr! x y)
          (loop temp x))))
  (loop x '()))

(define v (list 'a 'b 'c 'd))
(define w (mystery v))
;(display w)
;(newline)
;(display v)
;(newline)
;(define z2 (cons (list 'a 'b) (list 'a 'b)))

(define x (list 'a 'b))
(define z1 (cons x x))
(define (set-to-wow! x)
  (set-car! (car x) 'wow)
  x)
;(newline)
;(display (set-to-wow! z1))
;(newline)
;(display (set-to-wow! z2))
;(newline)

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((eq? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (count-pairs x)
  (let ((exist nil))
    (define (helper l)
      (if (or (not (pair? l)) (element-of-set? l exist)) 
          0
          (begin (set! exist (cons l exist))
           (+
            (helper (car l))
            (helper (cdr l))
            1))))
    (helper x)))
  
;(newline)
;(display (count-pairs z2))
;(newline)
;(display (count-pairs z1))

(define (circle-check x)
  (let ((set nil))
    (define (has-circle? l)
      (if (not (pair? l))
          false
          (if (element-of-set? l set)
              true
              (begin
                (set! set (cons l set))
                (or (has-circle? (car l))
                    (has-circle? (cdr l)))))))
    (has-circle? x)))
;(newline)
;(display (circle-check z1))
(define a (list 'a 'b 'c))
(let ((a-cdr (cddr a)))
  (set-cdr! a-cdr a))
(display a)
(newline)
(display (circle-check a))

(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))
(define (empty-queue? queue) (null? (front-ptr queue)))
(define (make-queue) (cons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (front-ptr queue))))
(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue)))) 
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))

(define q1 (make-queue))
(newline)
(display (insert-queue! q1 'a))
(display (insert-queue! q1 'b))
(display (delete-queue! q1))

