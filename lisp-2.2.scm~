(define one-through-four (list 1 2 3 4))
;one-through-four
(define my-list (cons <a1> (cons <a2> (cons  (cons <an> nil)))))
;(car one-through-four)
;(cdr one-through-four)
;(car (cdr one-through-four))
;(cons 10 one-through-four)
;(cons 5 one-through-four)
(define (my-list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items) (- n 1))))
(define squares (list 1 4 9 16 25))
;(list-ref squares 3)
(define (my-length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))))
(define odds (list 1 3 5 7))
;(my-length odds)
(define (my-length items)
  (define (length-iter a count)
    (if (null? a)
        count
        (length-iter (cdr a) (+ 1 count))))
  (length-iter items 0))
(define (my-append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (my-append (cdr list1) list2))))


;2.17
(define (my-last-pair list1)
  (let ((len (length list1)))
    (list-ref list1 (- len 1))))

;(last-pair odds)
;(list-ref odds 3)
(my-last-pair odds)

;2.18
